{
    "collab_server" : "",
    "contents" : "#' Constraints for Non-Linear Regression Model\n#'\n#' @aliases constrNLR\n#'\n#' @description Specifies the constraints for Non-Linear Regression model.\n#'\n#' @param model character: generalized logistic regression model to be fitted. See \\strong{Details}.\n#' @param type character: type of DIF to be tested (either \"both\" (default), \"udif\", or \"nudif\"). See \\strong{Details}.\n#'\n#' @usage constrNLR(model, type = \"both\")\n#'\n#' @details\n#' Function specifies constraints for 4PL generalized logistic regression model with\n#' respect to \\code{model} choice and \\code{type} of DIF to be tested.\n#'\n#' The options of \\code{model} are as follows: \\code{Rasch} for one-parameter logistic model with\n#' discrimination parameter fixed on value 1 for both groups, \\code{1PL} for one-parameter logistic\n#' model with discrimination parameter fixed for both groups, \\code{2PL} for logistic regression model,\n#' \\code{3PLcg} for three-parameter logistic regression model with fixed guessing for both groups,\n#' \\code{3PLdg} for three-parameter logistic regression model with fixed inattention for both groups,\n#' \\code{3PLc} and \\code{3PL} for three-parameter logistic regression model with guessing parameter,\n#' \\code{3PLd} for three-parameter logistic regression model with inattention parameter,\n#' \\code{4PLcgdg} for four-parameter logistic regression model with fixed guessing and inattention\n#' parameter for both groups,\n#' \\code{4PLcg} for four-parameter logistic regression model with fixed guessing for both groups,\n#' \\code{4PLdg} for four-parameter logistic regression model with fixed inattention for both groups, or\n#' \\code{4PL} for four-parameter logistic regression model.\n#'\n#' The \\code{type} corresponds to type of DIF to be tested. Possible values are \\code{\"both\"} to\n#' detect any DIF (uniform and/or non-uniform), \\code{\"udif\"} to detect only uniform DIF or\n#' \\code{\"nudif\"} to detect only non-uniform DIF.\n#' return(rbind(lowerM0, upperM0, lowerM1, upperM1))\n#'\n#' @return A matrix with 4 rows and 8 columns. First two rows represent lower and\n#' upper constraints for null model. Last two rows represent lower and upper constraints\n#' for alternative model. First four columns represent parameters of 4PL generalized\n#' logistic regression model (a, b, c, d) for reference group. Last four columns represent\n#' differences in parameters between reference and focal group (aDif, bDif, cDif, dDif).\n#'\n#' @author\n#' Adela Drabinova \\cr\n#' Institute of Computer Science, The Czech Academy of Sciences \\cr\n#' Faculty of Mathematics and Physics, Charles University \\cr\n#' adela.drabinova@gmail.com \\cr\n#'\n#' Patricia Martinkova \\cr\n#' Institute of Computer Science, The Czech Academy of Sciences \\cr\n#' martinkova@cs.cas.cz \\cr\n#'\n#' @examples\n#' \\dontrun{\n#' # 3PL model with the same guessing for both groups\n#' # to test both types of DIF\n#' constrNLR(model = \"3PLcg\", type = \"both\")\n#'\n#' # 3PL model to test uniform DIF\n#' constrNLR(model = \"3PL\", type = \"udif\")\n#'\n#' # 2PL model to test non-uniform DIF\n#' constrNLR(model = \"2PL\", type = \"nudif\")\n#' }\n#' @export\n\nconstrNLR <- function(model, type = \"both\"){\n  if (missing(model)) {\n    stop(\"'model' is missing\",\n         call. = FALSE)\n  } else {\n    if (!(model %in% c(\"Rasch\", \"1PL\", \"2PL\", \"3PLcg\", \"3PLdg\", \"3PLc\", \"3PLd\", \"3PL\", \"4PLcgdg\",\n                       \"4PLcg\", \"4PLdg\", \"4PL\"))){\n      stop(\"Invalid value for 'model'\",\n           call. = FALSE)\n    }\n  }\n  if (!type %in% c(\"udif\", \"nudif\", \"both\") | !is.character(type))\n    stop(\"'type' must be either 'udif', 'nudif' or 'both'\",\n         call. = FALSE)\n\n  lower <- c(a = -Inf, b = -Inf, c = 0, d = 0, aDif = -Inf, bDif = -Inf, cDif = 0, dDif = 0)\n  upper <- c(a = Inf, b = Inf, c = 1, d = 1, aDif = Inf, bDif = Inf, cDif = 0, dDif = 0)\n\n  if (grepl(\"4\", model)){\n    if (!(grepl(\"cgdg\", model))){\n      upper[\"cDif\"] <- upper[\"dDif\"] <- 1\n      lower[\"cDif\"] <- lower[\"dDif\"] <- -1\n      if (grepl(\"cg\", model)){\n        lower[\"cDif\"] <- upper[\"cDif\"] <- 0 # TBS\n      } else {\n        if (grepl(\"dg\", model))\n          lower[\"dDif\"] <- upper[\"dDif\"] <- 0 # TBS\n      }\n    }\n  } else {\n    if (grepl(\"3\", model)){\n      if (!(grepl(\"d\", model))){\n        lower[\"d\"] <- 1\n        if (!(grepl(\"g\", model))){\n          upper[\"cDif\"] <- 1 # TBS\n          lower[\"cDif\"] <- -1 # TBS\n        }\n      } else {\n        upper[\"c\"] <- 0\n        if (!(grepl(\"g\", model))){\n          upper[\"dDif\"] <- 1 # TBS\n          lower[\"dDif\"] <- -1 # TBS\n        }\n      }\n    } else {\n      upper[\"c\"] <- 0\n      lower[\"d\"] <- 1\n      if (!(grepl(\"2\", model))){\n        lower[\"aDif\"] <- upper[\"aDif\"] <- 0\n        if (!(grepl(\"1\", model)))\n          lower[\"a\"] <- upper[\"a\"] <- 1\n      }\n    }\n  }\n\n  lowerM0 <- lowerM1 <- lower\n  upperM0 <- upperM1 <- upper\n\n  lowerM1[\"aDif\"] <- upperM1[\"aDif\"] <- 0\n\n  if (type == \"udif\"){\n    lowerM0[\"aDif\"] <- upperM0[\"aDif\"] <- 0\n    lowerM1[\"bDif\"] <- upperM1[\"bDif\"] <- 0\n  }\n  if (type == \"both\")\n    lowerM1[\"bDif\"] <- upperM1[\"bDif\"] <- 0\n\n  return(rbind(lowerM0, upperM0, lowerM1, upperM1))\n}\n",
    "created" : 1482151197162.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1439554281",
    "id" : "CA84C12C",
    "lastKnownWriteTime" : 1483357568,
    "last_content_update" : -2147483648,
    "path" : "U:/difNLR/R/constrNLR.R",
    "project_path" : "R/constrNLR.R",
    "properties" : {
        "tempName" : "Untitled7"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}