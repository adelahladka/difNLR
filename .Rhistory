print(colnames(fit$parM0))
print(colnames(fit$parM1))
}
}
library(difNLR)
data(GMAT)
Data <- GMAT[, 1:20]
group <- GMAT[, 21]
# type = "both"
# type = "nudif"
# type = "udif"
#
# model = "4PL"
test = "F"
alpha = 0.05
p.adjust.method = "none"
for (model in c("4PLcgdg",
"4PLcg", "4PLdg", "4PL")){
for (type in c("both", "nudif", "udif")){
fit <- difNLR(Data, group, focal.name = 1, type = type, model = model,
test = test, p.adjust.method = p.adjust.method)
print(paste("*** model", model, ", type ", type, "***"))
print(colnames(fit$nlrPAR))
print(colnames(fit$parM0))
print(colnames(fit$parM1))
}
}
for (model in c("4PL")){
for (type in c("both", "nudif", "udif")){
fit <- difNLR(Data, group, focal.name = 1, type = type, model = model,
test = test, p.adjust.method = p.adjust.method)
print(paste("*** model", model, ", type ", type, "***"))
print(colnames(fit$nlrPAR))
print(colnames(fit$parM0))
print(colnames(fit$parM1))
}
}
data(GMAT)
Data <- GMAT[, 1:20]
group <- GMAT[, 21]
# type = "both"
# type = "nudif"
# type = "udif"
#
# model = "4PL"
test = "F"
alpha = 0.05
p.adjust.method = "none"
for (model in c("4PL")){
for (type in c("both", "nudif", "udif")){
fit <- difNLR(Data, group, focal.name = 1, type = type, model = model,
test = test, p.adjust.method = p.adjust.method)
print(paste("*** model", model, ", type ", type, "***"))
print(colnames(fit$nlrPAR))
print(colnames(fit$parM0))
print(colnames(fit$parM1))
}
}
data(GMAT)
data  <- GMAT[, colnames(GMAT) != "group"]
group <- GMAT[, "group"]
NLR(Data, group)
NLR(Data, group, model = "3PLcg")
NLR <- function(Data, group, model, type = "both", start,
p.adjust.method = "none", test = "LR", alpha = 0.05){
gNLR <- function(x, g, a, b, c, d, aDif, bDif, cDif, dDif){
return((c + cDif * g) + ((d + dDif * g) - (c + cDif * g)) / (1 + exp(-(a + aDif * g) * (x - (b + bDif * g)))))
}
if(missing(start)){
start <- startNLR(Data, group, model)
}
constr <- constrNLR(model = model, type = type)
lowerM0 <- constr["lowerM0", ]; upperM0 <- constr["upperM0", ]
lowerM1 <- constr["lowerM1", ]; upperM1 <- constr["upperM1", ]
start_m0 <- start_m1 <- start
start_m1[, "aDif"] <- 0
if (!(type == "nudif")){
start_m1[, "bDif"] <- 0
if (type == "udif"){
start_m0[, "aDif"] <- 0
}
}
x <- scale(apply(Data, 1, sum))
m <- ncol(Data)
n <- nrow(Data)
fixedM0 <- lowerM0[lowerM0 == upperM0]
fixedM1 <- lowerM1[lowerM1 == upperM1]
if (length(fixedM0) == 0){
whM0 <- colnames(start_m0)
} else {
for (i in 1:length(fixedM0)){
assign(names(fixedM0)[i], fixedM0[i])
}
whM0 <- colnames(start_m0)[(!(colnames(start_m0) %in% names(fixedM0)))]
start_m0 <- structure(data.frame(start_m0[, whM0]), .Names = whM0)
lowerM0 <- lowerM0[whM0]; upperM0 <- upperM0[whM0]
}
m0 <- lapply(1:m, function(i) tryCatch(nls(Data[, i] ~ gNLR(x, group, a, b, c, d, aDif, bDif, cDif, dDif),
algorithm = "port",
start = structure(start_m0[i, ], .Names = whM0),
lower = lowerM0,
upper = upperM0),
error = function(e){cat("ERROR : ",
conditionMessage(e), "\n")}))
if (length(fixedM0) != 0){
for (i in 1:length(fixedM0)){
rm(list = as.character(names(fixedM0)[i]))
}
}
whM1 <- colnames(start_m1)[(!(colnames(start_m1) %in% names(fixedM1)))]
start_m1 <- structure(data.frame(start_m1[, whM1]), .Names = whM1)
lowerM1 <- lowerM0[whM1]; upperM1 <- upperM0[whM1]
for (i in 1:length(fixedM1)){
assign(names(fixedM1)[i], fixedM1[i])
}
m1 <- lapply(1:m, function(i) tryCatch(nls(Data[, i] ~ gNLR(x, group, a, b, c, d, aDif, bDif, cDif, dDif),
algorithm = "port",
start = structure(start_m1[i, ], .Names = whM1),
lower = lowerM1,
upper = upperM1),
error = function(e){cat("ERROR : ",
conditionMessage(e), "\n")}))
cfM0 <- unlist(lapply(m0, is.null)); cfM1 <- unlist(lapply(m1, is.null))
conv.fail <- sum(cfM0, cfM1)
conv.fail.which <- which(cfM0 | cfM1)
if (conv.fail > 0) {
warning("Convergence failure")
}
if (test == "F"){
pval <- Fval <- rep(NA, m)
df <- switch(type,
both = c(2, n - 5),
udif = c(1, n - 4),
nudif = c(1, n - 5))
Fval[which(!(cfM1 | cfM0))] <- sapply(which(!(cfM1 |  cfM0)),
function(l) ((m1[[l]]$m$deviance() - m0[[l]]$m$deviance())/df[1])/(m0[[l]]$m$deviance()/df[2]))
pval[which(!(cfM1 | cfM0))] <- sapply(which(!(cfM1 | cfM0)),
function(l) (1 - pf(Fval[l], df[1], df[2])))
} else {
pval <- LRval <- rep(NA, m)
df <- switch(type,
both = 2,
udif = 1,
nudif = 1)
LRval[which(!(cfM1 | cfM0))] <- sapply(which(!(cfM1 |  cfM0)),
function(l) -2 * c(logLik(m1[[l]]) - logLik(m0[[l]])))
pval[which(!(cfM1 | cfM0))] <- sapply(which(!(cfM1 | cfM0)),
function(l) (1 - pchisq(LRval[l], df)))
}
adjusted.pval <- p.adjust(pval, method = p.adjust.method)
par.m1 <- se.m1 <- structure(data.frame(matrix(NA, nrow = m, ncol = length(lowerM1))), .Names = names(lowerM1))
par.m0 <- se.m0 <- structure(data.frame(matrix(NA, nrow = m, ncol = length(lowerM0))), .Names = names(lowerM0))
if (dim(par.m1)[2] == 1){
par.m1[which(!cfM1), ] <- sapply(m1[which(!cfM1)], coef)
par.m1 <- structure(data.frame(par.m1), names = unique(names(par.m1)))
} else {
par.m1[which(!cfM1), ] <- t(sapply(m1[which(!cfM1)], coef))
}
par.m0[which(!cfM0), ] <- t(sapply(m0[which(!cfM0)], coef))
cov.m0 <- cov.m1 <- lapply(1:m, function(i) NA)
cov.m1[which(!cfM1)] <- lapply(m1[which(!cfM1)], vcov)
cov.m0[which(!cfM0)] <- lapply(m0[which(!cfM0)], vcov)
if (dim(par.m1)[2] == 1){
se.m1[which(!cfM1), ] <- sqrt(sapply(cov.m1[which(!cfM1)], diag))
se.m1 <- structure(data.frame(se.m1), names = unique(names(se.m1)))
} else {
se.m1[which(!cfM1), ] <- sqrt(t(sapply(cov.m1[which(!cfM1)], diag)))
}
se.m0[which(!cfM0), ] <- sqrt(t(sapply(cov.m0[which(!cfM0)] , diag)))
rownames(par.m1) <- rownames(par.m0) <- rownames(se.m1) <- rownames(se.m0) <- paste("Item", 1:m, sep = "")
results <- list(Sval = switch(test, "F" = Fval, "LR" = LRval),
pval = pval, adjusted.pval = adjusted.pval,
df = df, test = test,
par.m0 = par.m0, se.m0 = se.m0, cov.m0 = cov.m0,
par.m1 = par.m1, se.m1 = se.m1, cov.m1 = cov.m1,
conv.fail = conv.fail, conv.fail.which = conv.fail.which)
return(results)
}
NLR(Data, group, model = "3PLcg")
NLR(Data, group, model = "3PLcg", test = "F")
NLR(Data, group, model = "3PLcg", p.adjust.method = "BH")
NLR(Data, group, model = "3PLcg", type = "udif")
NLR(Data, group, model = "3PLcg", type = "nudif")
data(GMAT)
Data  <- GMAT[, colnames(GMAT) != "group"]
group <- GMAT[, "group"]
x <- difNLR(Data, group, focal.name = 1, model = "3PLcg")
difNLR(Data, group, focal.name = 1, model = "3PLcg", test = "F")
x
difNLR(Data, group, focal.name = 1, model = "3PLcg", test = "F")
difNLR(Data, group, focal.name = 1, model = "Rasch")
difNLR(Data, group, focal.name = 1, model = "2PL")
difNLR(Data, group, focal.name = 1, model = "2PL", type = "udif")
difNLR(Data, group, focal.name = 1, model = "3PLcg", p.adjust.method = "BH")
difNLR(Data, group, focal.name = 1, model = "2PL", type = "udif")
difNLR(Data, group, focal.name = 1, model = "2PL", type = "nudif")
plot(x, item = x$DIFitems)
x$nlrPAR
dim(x$nlrPAR)
PAR <- data.frame(a = rep(1, m), b = 0, c = 0, d = 1, aDif = 0, bDif = 0, cDif = 0, dDif = 0)
m <- 20
PAR <- data.frame(a = rep(1, m), b = 0, c = 0, d = 1, aDif = 0, bDif = 0, cDif = 0, dDif = 0)
PAR
colnames(x$nlrPAR)
PAR[, colnames(x$nlrPAR)] <- x$nlrPAR
PAR
library(difNLR)
data(GMAT)
Data  <- GMAT[, colnames(GMAT) != "group"]
group <- GMAT[, "group"]
# Testing both DIF effects using likelihood-ratio test and
# 3PL model with fixed guessing for groups
x <- difNLR(Data, group, focal.name = 1, model = "3PLcg")
x
difNLR(Data, group, focal.name = 1, model = "3PLcg", test = "F")
difNLR(Data, group, focal.name = 1, model = "3PLcg", p.adjust.method = "BH")
difNLR(Data, group, focal.name = 1, model = "Rasch")
difNLR(Data, group, focal.name = 1, model = "2PL")
difNLR(Data, group, focal.name = 1, model = "2PL", type = "udif")
difNLR(Data, group, focal.name = 1, model = "2PL", type = "nudif")
plot(x, item = x$DIFitems)
x$DIFitems
plot(x, plot.type = "stat")
fitted(x)
fitted(x, item = 1)
# Predicted values
predict(x)
predict(x, item = 1)
# Predicted values for new subjects
predict(x, item = 1, score = 0, group = 1)
predict(x, item = 1, score = 0, group = 0)
m <- nrow(x$nlrPAR)
if (class(item) == "character"){
if (item != "all")
stop("'item' must be either numeric vector or character string 'all' ",
call. = FALSE)
} else {
if (class(item) != "integer" & class(item) != "numeric")
stop("'item' must be either numeric vector or character string 'all' ",
call. = FALSE)
}
if (class(item) == "numeric" & !all(item %in% 1:m))
stop("invalid number of 'item'",
call. = FALSE)
if (class(item) == "integer" & !all(item %in% 1:m))
stop("'item' must be either numeric vector or character string 'all' ",
call. = FALSE)
if (length(col) == 1){
col <- rep(col, 2)
} else {
if (length(col) > 2){
col <- col[1:2]
warning("Length of 'col' is greater than 2. Only first two values are used",
call. = FALSE)
}
}
if (class(item) == "character"){
items <- 1:m
} else {
items <- item
}
item <- 1
if (class(item) == "character"){
items <- 1:m
} else {
items <- item
}
items
if (any(x$conv.fail.which %in% items)){
if (length(setdiff(items, x$conv.fail.which)) == 0){
stop(paste("Item ", intersect(x$conv.fail.which, items), " does not converge. Characteristic curve not plotted",
sep = "", collapse = "\n"),
call. = FALSE)
} else {
warning(paste("Item ", intersect(x$conv.fail.which, items), " does not converge. Characteristic curve not plotted",
sep = "", collapse = "\n"),
call. = FALSE)
items <- setdiff(items, x$conv.fail.which)
}
}
if (length(linetype) != 2){
if (length(linetype) == 1){
linetype <- rep(linetype, 2)
} else {
linetype <- linetype[1:2]
warning("Length of 'linetype' is greater than 2. Only first two values are used",
call. = FALSE)
}
}
if (!missing(title)){
TITLE <- title
}
gNLR <- deriv3( ~ (c + cDif * g) + ((d + dDif * g) - (c + cDif * g)) /
(1 + exp(-(a + aDif * g) * (x - (b + bDif * g)))),
namevec = c("a", "b", "c", "d", "aDif", "bDif", "cDif", "dDif"),
function.arg = function(x, g, a, b, c, d, aDif, bDif, cDif, dDif){})
### Data
xR <- c(scale(apply(x$Data[x$group == 0, ], 1, sum)))
xF <- c(scale(apply(x$Data[x$group == 1, ], 1, sum)))
max_sts <- max(as.numeric(levels(as.factor(xR))),
as.numeric(levels(as.factor(xF))))
min_sts <- min(as.numeric(levels(as.factor(xR))),
as.numeric(levels(as.factor(xF))))
alpha <- 0.5
plot_CC <- list()
i <- 1
hv_R <- data.frame(cbind(as.numeric(levels(as.factor(xR))),
tapply(x$Data[x$group == 0, i],
as.factor(xR), mean)))
hv_F <- data.frame(cbind(as.numeric(levels(as.factor(xF))),
tapply(x$Data[x$group == 1, i],
as.factor(xF), mean)))
hv   <- data.frame(rbind(cbind(hv_R, Group = "Reference"),
cbind(hv_F, Group = "Focal")))
rownames(hv) <- 1:dim(hv)[1]
hv$size <- c(table(xR), table(xF))
if (missing(title)){
TITLE <- paste("Item", i)
}
if (dim(x$nlrPAR)[2] != 8){
PAR <- data.frame(a = rep(1, m), b = 0, c = 0, d = 1, aDif = 0, bDif = 0, cDif = 0, dDif = 0)
PAR[, colnames(x$nlrPAR)] <- x$nlrPAR
} else {
PAR <- x$nlrPAR
}
PAR
library(difNLR)
plot(x, item = x$DIFitems)
a <- rnorm(100)
y <- jitter(-5 + 3*a, 200)
lm(y ~a)
fit <- lm(y ~ a)
summary(fit)
fit
x
lrtest(fit)
lmtest(fit)
lmtest::lmtest(fit)
anova(fit)
anova(fit, test = "Chisq")
anova(fit, test = "chisq")
anova(fit, test = "LR")
drop1(fit, test = "Chisq")
devtools::document()
devtools::build()
devtools::check(document = FALSE, args = c('--as-cran'))
devtools::check(document = FALSE, args = c('--as-cran'))
devtools::check(document = FALSE, args = c('--as-cran'))
data(GMAT)
Data  <- GMAT[, colnames(GMAT) != "group"]
group <- GMAT[, "group"]
x <- difNLR(Data, group, focal.name = 1, model = "3PLcg")
x
difNLR(Data, group, focal.name = 1, model = "3PLcg", test = "F")
difNLR(Data, group, focal.name = 1, model = "3PLcg", p.adjust.method = "BH")
difNLR(Data, group, focal.name = 1, model = "Rasch")
# Testing both DIF effects using 2PL model
difNLR(Data, group, focal.name = 1, model = "2PL")
# Testing uniform DIF effects
difNLR(Data, group, focal.name = 1, model = "2PL", type = "udif")
# Testing non-uniform DIF effects
difNLR(Data, group, focal.name = 1, model = "2PL", type = "nudif")
plot(x, item = x$DIFitems)
fitted(x)
fitted(x, item = 1)
# Predicted values
predict(x)
if (length(group) == 1) {
if (is.numeric(group)) {
GROUP <- Data[, group]
DATA <- Data[, (1:ncol(Data)) != group]
colnames(DATA) <- colnames(Data)[(1:ncol(Data)) !=  group]
} else {
GROUP <- Data[, colnames(Data) == group]
DATA <- Data[, colnames(Data) != group]
colnames(DATA) <- colnames(Data)[colnames(Data) !=  group]
}
} else {
GROUP <- group
DATA <- Data
}
if (length(levels(as.factor(GROUP))) != 2)
stop("'group' must be binary vector", call. = FALSE)
if (is.matrix(DATA) | is.data.frame(DATA)) {
if (!all(apply(DATA, 2, function(i) {
length(levels(as.factor(i))) == 2
})))
stop("'Data' must be data frame or matrix of binary vectors",
call. = FALSE)
if (nrow(DATA) != length(GROUP))
stop("'Data' must have the same number of rows as is length of vector 'group'",
call. = FALSE)
} else {
stop("'Data' must be data frame or matrix of binary vectors",
call. = FALSE)
}
GROUP <- as.numeric(as.factor(GROUP) == focal.name)
focal.name = 1
GROUP <- as.numeric(as.factor(GROUP) == focal.name)
start <- startNLR(DATA, GROUP, model)
model = "Rasch"
start <- startNLR(DATA, GROUP, model)
start
model = "1PL"
start <- startNLR(DATA, GROUP, model)
start
devtools::document()
devtools::document()
devtools::build()
devtools::check(document = FALSE, args = c('--as-cran'))
devtools::document()
devtools::document()
devtools::check(document = FALSE, args = c('--as-cran'))
devtools::build()
parameters <- data.frame(a = runif(10, 0.8, 2),
parameters <- data.frame(a = runif(10, 0.8, 2),
b = rnorm(10),
c = runif(10, 0, 0.4),
d = 1,
aDif = 0, bDif = 0,
cDif = 0, dDif = 0)
parameters <- data.frame(a = runif(10, 0.8, 2),
b = rnorm(10),
c = runif(10, 0, 0.4),
d = 1,
aDif = 0, bDif = 0,
cDif = 0, dDif = 0)
parameters <- data.frame(a = runif(10, 0.8, 2),
b = rnorm(10),
c = runif(10, 0, 0.4),
d = 1,
aDif = 0, bDif = 0,
cDif = 0, dDif = 0)
parameters
i <- 1
list(parameters[i, ])
gNLR(x, group, list(parameters[i, ])
)
gNLR <- function(x, g, a, b, c, d, aDif, bDif, cDif, dDif){
return((c + cDif * g) + ((d + dDif * g) - (c + cDif * g)) / (1 + exp(-(a + aDif * g) * (x - (b + bDif * g)))))
}
gNLR(x, group, list(parameters[i, ]))
list(parameters[i, ])
gNLR(x, group, parameters[i, ])
do.call(gNLR, list(x = x, g  = group, parameters[i, ]))
do.call(gNLR, c(list(x = x, g  = group), parameters[i, ]))
c(list(x = x, g  = group), parameters[i, ])
N = 1000
ratio = 1
n <- nrow(parameters)
N_R   <- round(N/(ratio + 1)*ratio)
N_F   <- round(N/(ratio + 1))
group <- c(rep(0, N_R), rep(1, N_F))
theta <- rnorm(N, mean = 0, sd = 1)
do.call(gNLR, c(list(x = theta, g  = group), parameters[i, ]))
p <- sapply(1:nrow(parameters), function(i) do.call(gNLR, c(list(x = theta, g  = group), parameters[i, ])))
head(data.frame(p))
pR <- sapply(1:nrow(parameters), function(i) do.call(gNLR, c(list(x = theta[1:N_R], g  = 0), parameters[i, ])))
pF <- sapply(1:nrow(parameters), function(i) do.call(gNLR, c(list(x = theta[(N_R + 1):N], g  = 1), parameters[i, ])))
p <- rbind(pR, pF)
answer <- matrix(NA, nrow = N, ncol = n)
for (j in 1:n) {
for (i in 1:N) {
answer[i, j] <- rbinom(1, 1, p[i, j])
}
}
answer
data <- data.frame(answer, group)
colnames(data) <- c(paste("Item", seq_along(1:n), sep=""), "group")
head(data)
genNLR <- function(N = 1000, ratio = 1, parameters){
n <- nrow(parameters)
N_R   <- round(N/(ratio + 1)*ratio)
N_F   <- round(N/(ratio + 1))
group <- c(rep(0, N_R), rep(1, N_F))
gNLR <- function(x, g, a, b, c, d, aDif, bDif, cDif, dDif){
return((c + cDif * g) + ((d + dDif * g) - (c + cDif * g)) / (1 + exp(-(a + aDif * g) * (x - (b + bDif * g)))))
}
theta <- rnorm(N, mean = 0, sd = 1)
pR <- sapply(1:nrow(parameters), function(i)
do.call(gNLR, c(list(x = theta[1:N_R], g  = 0), parameters[i, ])))
pF <- sapply(1:nrow(parameters), function(i)
do.call(gNLR, c(list(x = theta[(N_R + 1):N], g  = 1), parameters[i, ])))
p <- rbind(pR, pF)
answer <- matrix(NA, nrow = N, ncol = n)
for (j in 1:n) {
for (i in 1:N) {
answer[i, j] <- rbinom(1, 1, p[i, j])
}
}
data <- data.frame(answer, group)
colnames(data) <- c(paste("Item", seq_along(1:n), sep=""), "group")
return(data)
}
parameters <- data.frame(a = runif(10, 0.8, 2),
b = rnorm(10),
c = runif(10, 0, 0.4),
d = 1,
aDif = 0, bDif = 0,
cDif = 0, dDif = 0)
genNLR(N = 300, parameters = parameters)
genNLR(N = 300, ratio = 5, parameters = parameters)
devtools::document()
devtools::document()
devtools::build()
devtools::check(document = FALSE, args = c('--as-cran'))
build(binary = T)
devtools::build(binary = T)
devtools::build()
devtools::build(binary = T)
devtools::build()
library(difNLR)
